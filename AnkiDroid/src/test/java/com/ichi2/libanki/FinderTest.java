/*
 Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
 Foundation; either version 3 of the License, or (at your option) any later
 version.

 This program is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 PARTICULAR PURPOSE. See the GNU General Public License for more details.

 You should have received a copy of the GNU General Public License along with
 this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.ichi2.libanki;

import android.content.Intent;
import android.util.Pair;

import com.ichi2.anki.CardBrowser;
import com.ichi2.anki.RobolectricTest;
import com.ichi2.anki.exception.ConfirmModSchemaException;
import com.ichi2.libanki.sched.SchedV2;
import com.ichi2.utils.JSONObject;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.robolectric.annotation.Config;

import java.util.Arrays;
import java.util.Calendar;
import java.util.List;

import androidx.annotation.NonNull;
import androidx.test.ext.junit.runners.AndroidJUnit4;
import timber.log.Timber;

import static com.ichi2.libanki.Consts.CARD_TYPE_REV;
import static com.ichi2.libanki.Consts.QUEUE_TYPE_REV;
import static com.ichi2.libanki.Consts.QUEUE_TYPE_SUSPENDED;
import static com.ichi2.libanki.stats.Stats.SECONDS_PER_DAY;
import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;
import static com.ichi2.utils.CollectionUtils.getLastListElement;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.greaterThan;
import static org.hamcrest.Matchers.hasItem;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertTrue;

@RunWith(AndroidJUnit4.class)
public class FinderTest extends RobolectricTest {

    @Test
    @Config(qualifiers = "en")
    public void searchForBuriedReturnsManuallyAndSiblingBuried() throws ConfirmModSchemaException {
        final String searchQuery = "is:buried";

        SchedV2 sched = upgradeToSchedV2();  //needs to be first

        enableBurySiblings();
        super.addNoteUsingModelName("Basic (and reversed card)", "Front", "Back");
        Card toAnswer = sched.getCard();

        //act
        Card siblingBuried = burySiblings(sched, toAnswer);
        Card manuallyBuriedCard = buryManually(sched, toAnswer.getId());

        //perform the search
        List<Long> buriedCards = new Finder(mCol).findCards(searchQuery, false);

        //assert
        assertThat("A manually buried card should be returned", buriedCards, hasItem(manuallyBuriedCard.getId()));
        assertThat("A sibling buried card should be returned", buriedCards, hasItem(siblingBuried.getId()));
        assertThat("sibling and manually buried should be the only cards returned", buriedCards, hasSize(2));
    }


    private void enableBurySiblings() {
        mCol.getDecks().allConf().get(0).getJSONObject("new").put("bury", true);
    }


    @NonNull
    private Card burySiblings(SchedV2 sched, Card toManuallyBury) {
        sched.answerCard(toManuallyBury, 1);
        Card siblingBuried = new Note(mCol, toManuallyBury.getNid()).cards().get(1);
        assertThat(siblingBuried.getQueue(), is(Consts.QUEUE_TYPE_SIBLING_BURIED));
        return siblingBuried;
    }


    @NonNull
    private Card buryManually(SchedV2 sched, long id) {
        sched.buryCards(new long[] {id}, true);
        Card manuallyBuriedCard = new Card(mCol, id);
        assertThat(manuallyBuriedCard.getQueue(), is(Consts.QUEUE_TYPE_MANUALLY_BURIED));
        return manuallyBuriedCard;
    }


    /*****************
     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py*
     *****************/

    public boolean isNearCutoff(Collection col) {
        int hour = mCol.getTime().calendar().get(Calendar.HOUR_OF_DAY);
        return hour >= 2 && hour < 4;
    }


    @Test
    public void test_findCards() {
        Note note = mCol.newNote();
        note.setItem("Front", "dog");
        note.setItem("Back", "cat");
        note.addTag("monkey animal_1 * %");
        mCol.addNote(note);
        long n1id = note.getId();
        long firstCardId = note.cards().get(0).getId();
        note = mCol.newNote();
        note.setItem("Front", "goats are fun");
        note.setItem("Back", "sheep");
        note.addTag("sheep goat horse animal11");
        mCol.addNote(note);
        long n2id = note.getId();
        note = mCol.newNote();
        note.setItem("Front", "cat");
        note.setItem("Back", "sheep");
        mCol.addNote(note);
        Card catCard = note.cards().get(0);
        Model m = mCol.getModels().current();
        m = mCol.getModels().copy(m);
        Models mm = mCol.getModels();
        JSONObject t = Models.newTemplate("Reverse");
        t.put("qfmt", "{{Back}}");
        t.put("afmt", "{{Front}}");
        mm.addTemplateModChanged(m, t);
        mm.save(m);
        note = mCol.newNote();
        note.setItem("Front", "test");
        note.setItem("Back", "foo bar");
        mCol.addNote(note);
        mCol.save();
        List<Long> latestCardIds = note.cids();
        // tag searches
        assertEquals(5, mCol.findCards("tag:*").size());
        assertEquals(1, mCol.findCards("tag:\\*").size());
        assertEquals(5, mCol.findCards("tag:%").size());
        assertEquals(1, mCol.findCards("tag:\\%").size());
        assertEquals(2, mCol.findCards("tag:animal_1").size());
        assertEquals(1, mCol.findCards("tag:animal\\_1").size());
        assertEquals(0, mCol.findCards("tag:donkey").size());
        assertEquals(1, mCol.findCards("tag:sheep").size());
        assertEquals(1, mCol.findCards("tag:sheep tag:goat").size());
        assertEquals(0, mCol.findCards("tag:sheep tag:monkey").size());
        assertEquals(1, mCol.findCards("tag:monkey").size());
        assertEquals(1, mCol.findCards("tag:sheep -tag:monkey").size());
        assertEquals(4, mCol.findCards("-tag:sheep").size());
        mCol.getTags().bulkAdd(mCol.getDb().queryLongList("select id from notes"), "foo bar");
        assertEquals(5, mCol.findCards("tag:foo").size());
        assertEquals(5, mCol.findCards("tag:bar").size());
        mCol.getTags().bulkRem(mCol.getDb().queryLongList("select id from notes"), "foo");
        assertEquals(0, mCol.findCards("tag:foo").size());
        assertEquals(5, mCol.findCards("tag:bar").size());
        // text searches
        assertEquals(2, mCol.findCards("cat").size());
        assertEquals(1, mCol.findCards("cat -dog").size());
        assertEquals(1, mCol.findCards("cat -dog").size());
        assertEquals(1, mCol.findCards("are goats").size());
        assertEquals(0, mCol.findCards("\"are goats\"").size());
        assertEquals(1, mCol.findCards("\"goats are\"").size());
        // card states
        Card c = note.cards().get(0);
        c.setQueue(QUEUE_TYPE_REV);
        c.setType(CARD_TYPE_REV);
        assertEquals(0, mCol.findCards("is:review").size());
        c.flush();
        assertEqualsArrayList((new Long[] {c.getId()}), mCol.findCards("is:review"));
        assertEquals(0, mCol.findCards("is:due").size());
        c.setDue(0);
        c.setQueue(QUEUE_TYPE_REV);
        c.flush();
        assertEqualsArrayList((new Long[] {c.getId()}), mCol.findCards("is:due"));
        assertEquals(4, mCol.findCards("-is:due").size());
        c.setQueue(QUEUE_TYPE_SUSPENDED);
        // ensure this card gets a later mod time
        c.flush();
        mCol.getDb().execute("update cards set mod = mod + 1 where id = ?", c.getId());
        assertEqualsArrayList((new Long[] {c.getId()}), mCol.findCards("is:suspended"));
        // nids
        assertEquals(0, mCol.findCards("nid:54321").size());
        assertEquals(2, mCol.findCards("nid:" + note.getId()).size());
        assertEquals(2, mCol.findCards("nid:" + n1id + "," + n2id).size());
        // templates
        assertEquals(0, mCol.findCards("card:foo").size());
        assertEquals(4, mCol.findCards("\"card:card 1\"").size());
        assertEquals(1, mCol.findCards("card:reverse").size());
        assertEquals(4, mCol.findCards("card:1").size());
        assertEquals(1, mCol.findCards("card:2").size());
        // fields
        assertEquals(1, mCol.findCards("front:dog").size());
        assertEquals(4, mCol.findCards("-front:dog").size());
        assertEquals(0, mCol.findCards("front:sheep").size());
        assertEquals(2, mCol.findCards("back:sheep").size());
        assertEquals(3, mCol.findCards("-back:sheep").size());
        assertEquals(0, mCol.findCards("front:do").size());
        assertEquals(5, mCol.findCards("front:*").size());
        // ordering
        mCol.getConf().put("sortType", "noteCrt");
        mCol.flush();
        assertTrue(latestCardIds.contains(getLastListElement(mCol.findCards("front:*", true))));
        assertTrue(latestCardIds.contains(getLastListElement(mCol.findCards("", true))));

        mCol.getConf().put("sortType", "noteFld");
        mCol.flush();
        assertEquals(catCard.getId(), (long) mCol.findCards("", true).get(0));
        assertTrue(latestCardIds.contains(getLastListElement(mCol.findCards("", true))));
        mCol.getConf().put("sortType", "cardMod");
        mCol.flush();
        assertTrue(latestCardIds.contains(getLastListElement(mCol.findCards("", true))));
        assertEquals(firstCardId, (long) mCol.findCards("", true).get(0));
        mCol.getConf().put("sortBackwards", true);
        mCol.flush();
        assertTrue(latestCardIds.contains(mCol.findCards("", true).get(0)));
        /* TODO: Port BuiltinSortKind
           assertEquals(firstCardId,
           mCol.findCards("", BuiltinSortKind.CARD_DUE, reverse=false).get(0)
           );
           assertNotEquals(firstCardId,
           mCol.findCards("", BuiltinSortKind.CARD_DUE, reverse=true).get(0));
        */
        // model
        assertEquals(3, mCol.findCards("note:basic").size());
        assertEquals(2, mCol.findCards("-note:basic").size());
        assertEquals(5, mCol.findCards("-note:foo").size());
        // col
        assertEquals(5, mCol.findCards("deck:default").size());
        assertEquals(0, mCol.findCards("-deck:default").size());
        assertEquals(5, mCol.findCards("-deck:foo").size());
        assertEquals(5, mCol.findCards("deck:def*").size());
        assertEquals(5, mCol.findCards("deck:*EFAULT").size());
        assertEquals(0, mCol.findCards("deck:*cefault").size());
        // full search
        note = mCol.newNote();
        note.setItem("Front", "hello<b>world</b>");
        note.setItem("Back", "abc");
        mCol.addNote(note);
        // as it's the sort field, it matches
        assertEquals(2, mCol.findCards("helloworld").size());
        // assertEquals(, mCol.findCards("helloworld", full=true).size())2 This is commented upstream
        // if we put it on the back, it won't
        String note_front = note.getItem("Front");
        String note_back = note.getItem("Back");
        note.setItem("Front", note_back);
        note.setItem("Back", note_front);
        note.flush();
        assertEquals(0, mCol.findCards("helloworld").size());
        // Those lines are commented above
        // assertEquals(, mCol.findCards("helloworld", full=true).size())2
        // assertEquals(, mCol.findCards("back:helloworld", full=true).size())2
        // searching for an invalid special tag should not error
        // TODO: ensure the search fail
        //  assertThrows(Exception.class, () -> mCol.findCards("is:invalid").size());
        // should be able to limit to parent col, no children
        long id = mCol.getDb().queryLongScalar("select id from cards limit 1");
        mCol.getDb().execute(
                "update cards set did = ? where id = ?", addDeck("Default::Child"), id);
        mCol.save();
        assertEquals(7, mCol.findCards("deck:default").size());
        assertEquals(1, mCol.findCards("deck:default::child").size());
        assertEquals(6, mCol.findCards("deck:default -deck:default::*").size());
        // properties
        id = mCol.getDb().queryLongScalar("select id from cards limit 1");
        mCol.getDb().execute(
                "update cards set queue=2, ivl=10, reps=20, due=30, factor=2200 where id = ?",
                id);
        assertEquals(1, mCol.findCards("prop:ivl>5").size());
        assertThat(mCol.findCards("prop:ivl<5").size(), greaterThan(1));
        assertEquals(1, mCol.findCards("prop:ivl>=5").size());
        assertEquals(0, mCol.findCards("prop:ivl=9").size());
        assertEquals(1, mCol.findCards("prop:ivl=10").size());
        assertThat(mCol.findCards("prop:ivl!=10").size(), greaterThan(1));
        assertEquals(1, mCol.findCards("prop:due>0").size());
        // due dates should work
        assertEquals(0, mCol.findCards("prop:due=29").size());
        assertEquals(1, mCol.findCards("prop:due=30").size());
        // ease factors
        assertEquals(0, mCol.findCards("prop:ease=2.3").size());
        assertEquals(1, mCol.findCards("prop:ease=2.2").size());
        assertEquals(1, mCol.findCards("prop:ease>2").size());
        assertThat(mCol.findCards("-prop:ease>2").size(), greaterThan(1));
        // recently failed
        if (!isNearCutoff(mCol)) {
            assertEquals(0, mCol.findCards("rated:1:1").size());
            assertEquals(0, mCol.findCards("rated:1:2").size());
            c = getCard();
            mCol.getSched().answerCard(c, 2);
            assertEquals(0, mCol.findCards("rated:1:1").size());
            assertEquals(1, mCol.findCards("rated:1:2").size());
            c = getCard();
            mCol.getSched().answerCard(c, 1);
            assertEquals(1, mCol.findCards("rated:1:1").size());
            assertEquals(1, mCol.findCards("rated:1:2").size());
            assertEquals(2, mCol.findCards("rated:1").size());
            assertEquals(0, mCol.findCards("rated:0:2").size());
            assertEquals(1, mCol.findCards("rated:2:2").size());
            // added
            assertEquals(0, mCol.findCards("added:0").size());
            mCol.getDb().execute("update cards set id = id - " + SECONDS_PER_DAY * 1000 + " where id = ?", id);
            assertEquals(mCol.cardCount() - 1, mCol.findCards("added:1").size());
            assertEquals(mCol.cardCount(), mCol.findCards("added:2").size());
        } else {
            Timber.w("some find tests disabled near cutoff");
        }
        // empty field
        assertEquals(0, mCol.findCards("front:").size());
        note = mCol.newNote();
        note.setItem("Front", "");
        note.setItem("Back", "abc2");
        assertEquals(1, mCol.addNote(note));
        assertEquals(1, mCol.findCards("front:").size());
        // OR searches and nesting
        assertEquals(2, mCol.findCards("tag:monkey or tag:sheep").size());
        assertEquals(2, mCol.findCards("(tag:monkey OR tag:sheep)").size());
        assertEquals(6, mCol.findCards("-(tag:monkey OR tag:sheep)").size());
        assertEquals(2, mCol.findCards("tag:monkey or (tag:sheep sheep)").size());
        assertEquals(1, mCol.findCards("tag:monkey or (tag:sheep octopus)").size());
        // flag
        // Todo: ensure it fails
        // assertThrows(Exception.class, () -> mCol.findCards("flag:12"));
    }

    @Test
    public void test_deckNameContainingWildcardCanBeSearched() {
        String val = "*Yr1::Med2::CAS4::F4: Renal::BRS (zanki)::HY";
        long currentDid = addDeck(val);
        mCol.getDecks().select(currentDid);
        Note note = mCol.newNote();
        note.setItem("Front", "foo");
        note.setItem("Back", "bar");
        note.model().put("did", currentDid);
        mCol.addNote(note);
        long did = note.firstCard().getDid();
        assertEquals(currentDid, did);
        CardBrowser cb = super.startActivityNormallyOpenCollectionWithIntent(CardBrowser.class, new Intent());
        int pos = cb.getChangeDeckPositionFromId(currentDid);
        cb.selectDropDownItem(pos + 1);    //Adjusting for All Decks option at position 0
        advanceRobolectricLooperWithSleep();
        assertEquals(1L, cb.getCardCount());
    }

    @Test
    public void test_findReplace() {
        Note note = mCol.newNote();
        note.setItem("Front", "foo");
        note.setItem("Back", "bar");
        mCol.addNote(note);
        Note note2 = mCol.newNote();
        note2.setItem("Front", "baz");
        note2.setItem("Back", "foo");
        mCol.addNote(note2);
        List<Long> nids = Arrays.asList(note.getId(), note2.getId());
        // should do nothing
        assertEquals(0, mCol.findReplace(nids, "abc", "123"));
        // global replace
        assertEquals(2, mCol.findReplace(nids, "foo", "qux"));
        note.load();
        assertEquals("qux", note.getItem("Front"));
        note2.load();
        assertEquals("qux", note2.getItem("Back"));
        // single field replace
        assertEquals(1, mCol.findReplace(nids, "qux", "foo", "Front"));
        note.load();
        assertEquals("foo", note.getItem("Front"));
        note2.load();
        assertEquals("qux", note2.getItem("Back"));
        // regex replace
        assertEquals(0, mCol.findReplace(nids, "B.r", "reg"));
        note.load();
        assertNotEquals("reg", note.getItem("Back"));
        assertEquals(1, mCol.findReplace(nids, "B.r", "reg", true));
        note.load();
        assertEquals(note.getItem("Back"), "reg");
    }


    @Test
    public void test_findDupes() {
        Note note = mCol.newNote();
        note.setItem("Front", "foo");
        note.setItem("Back", "bar");
        mCol.addNote(note);
        Note note2 = mCol.newNote();
        note2.setItem("Front", "baz");
        note2.setItem("Back", "bar");
        mCol.addNote(note2);
        Note note3 = mCol.newNote();
        note3.setItem("Front", "quux");
        note3.setItem("Back", "bar");
        mCol.addNote(note3);
        Note note4 = mCol.newNote();
        note4.setItem("Front", "quuux");
        note4.setItem("Back", "nope");
        mCol.addNote(note4);
        List<Pair<String, List<Long>>> r = mCol.findDupes("Back");
        Pair<String, List<Long>> r0 = r.get(0);
        assertEquals("bar", r0.first);
        assertEquals(3, r0.second.size());
        // valid search
        r = mCol.findDupes("Back", "bar");
        r0 = r.get(0);
        assertEquals("bar", r0.first);
        assertEquals(3, r0.second.size());
        // excludes everything
        r = mCol.findDupes("Back", "invalid");
        assertEquals(0, r.size());
        // front isn't dupe
        assertEquals(0, mCol.findDupes("Front").size());
    }

}
